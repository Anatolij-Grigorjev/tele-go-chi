// Code generated by MockGen. DO NOT EDIT.
// Source: telegram/bot_api.go
//
// Generated by this command:
//
//	mockgen -build_flags=-mod=mod -source=telegram/bot_api.go -destination=telegram/mock_bot_api.go -package=telegram
//

// Package telegram is a generated GoMock package.
package telegram

import (
	reflect "reflect"

	telego "github.com/mymmrac/telego"
	gomock "go.uber.org/mock/gomock"
)

// MockTelegoBotApi is a mock of TelegoBotApi interface.
type MockTelegoBotApi struct {
	ctrl     *gomock.Controller
	recorder *MockTelegoBotApiMockRecorder
}

// MockTelegoBotApiMockRecorder is the mock recorder for MockTelegoBotApi.
type MockTelegoBotApiMockRecorder struct {
	mock *MockTelegoBotApi
}

// NewMockTelegoBotApi creates a new mock instance.
func NewMockTelegoBotApi(ctrl *gomock.Controller) *MockTelegoBotApi {
	mock := &MockTelegoBotApi{ctrl: ctrl}
	mock.recorder = &MockTelegoBotApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegoBotApi) EXPECT() *MockTelegoBotApiMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockTelegoBotApi) SendMessage(params *telego.SendMessageParams) (*telego.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", params)
	ret0, _ := ret[0].(*telego.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockTelegoBotApiMockRecorder) SendMessage(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockTelegoBotApi)(nil).SendMessage), params)
}

// StopLongPolling mocks base method.
func (m *MockTelegoBotApi) StopLongPolling() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopLongPolling")
}

// StopLongPolling indicates an expected call of StopLongPolling.
func (mr *MockTelegoBotApiMockRecorder) StopLongPolling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopLongPolling", reflect.TypeOf((*MockTelegoBotApi)(nil).StopLongPolling))
}

// UpdatesViaLongPolling mocks base method.
func (m *MockTelegoBotApi) UpdatesViaLongPolling(params *telego.GetUpdatesParams, options ...telego.LongPollingOption) (<-chan telego.Update, error) {
	m.ctrl.T.Helper()
	varargs := []any{params}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatesViaLongPolling", varargs...)
	ret0, _ := ret[0].(<-chan telego.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatesViaLongPolling indicates an expected call of UpdatesViaLongPolling.
func (mr *MockTelegoBotApiMockRecorder) UpdatesViaLongPolling(params any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{params}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatesViaLongPolling", reflect.TypeOf((*MockTelegoBotApi)(nil).UpdatesViaLongPolling), varargs...)
}
