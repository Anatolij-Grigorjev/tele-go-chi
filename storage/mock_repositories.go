// Code generated by MockGen. DO NOT EDIT.
// Source: storage/repositories.go
//
// Generated by this command:
//
//	mockgen -build_flags=-mod=mod -source=storage/repositories.go -destination=storage/mock_repositories.go -package=storage
//

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPetsRepository is a mock of PetsRepository interface.
type MockPetsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPetsRepositoryMockRecorder
}

// MockPetsRepositoryMockRecorder is the mock recorder for MockPetsRepository.
type MockPetsRepositoryMockRecorder struct {
	mock *MockPetsRepository
}

// NewMockPetsRepository creates a new mock instance.
func NewMockPetsRepository(ctrl *gomock.Controller) *MockPetsRepository {
	mock := &MockPetsRepository{ctrl: ctrl}
	mock.recorder = &MockPetsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetsRepository) EXPECT() *MockPetsRepositoryMockRecorder {
	return m.recorder
}

// FindAllPlayerPets mocks base method.
func (m *MockPetsRepository) FindAllPlayerPets(PlayerID string) ([]PlayerPet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllPlayerPets", PlayerID)
	ret0, _ := ret[0].([]PlayerPet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllPlayerPets indicates an expected call of FindAllPlayerPets.
func (mr *MockPetsRepositoryMockRecorder) FindAllPlayerPets(PlayerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllPlayerPets", reflect.TypeOf((*MockPetsRepository)(nil).FindAllPlayerPets), PlayerID)
}

// SavePet mocks base method.
func (m *MockPetsRepository) SavePet(pet PlayerPet) (PlayerPet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePet", pet)
	ret0, _ := ret[0].(PlayerPet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePet indicates an expected call of SavePet.
func (mr *MockPetsRepositoryMockRecorder) SavePet(pet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePet", reflect.TypeOf((*MockPetsRepository)(nil).SavePet), pet)
}
